<?php

// $Id$
global $base_url;
define("PATH_TO_FILE", $base_url."/sites/default/files/");
define("JOB_PER_PAGE", 2);
define("EMPLOYER_ROLE_ID", 5);
define("JOB_SEEKER_ROLE_ID", 6);
define("WAITING_FOR_APPROVAL", "Waiting for Approval");
define("PUBLISHED", "Published");
define("SUBMITTED", "Submitted");

function custom_function_menu() {
	$items['custom_page'] = array(
		'title' => t('Custom Page'),
		'description' => 'custom_page',
		'page callback' => 'custom_page',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
	$items['register/verify/%/%'] = array(
		'title' => t('Register Verify'),
		'description' => 'register verify',
		'page callback' => 'register_verify',
		'page arguments' => array(2, 3),
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
        
	return $items;
}

function custom_page() {
	$curl = curl_init();

	curl_setopt_array($curl, array(
		CURLOPT_URL => "http://api.rajaongkir.com/starter/city",
		CURLOPT_RETURNTRANSFER => true,
		CURLOPT_ENCODING => "",
		CURLOPT_MAXREDIRS => 10,
		CURLOPT_TIMEOUT => 30,
		CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		CURLOPT_CUSTOMREQUEST => "GET",
		CURLOPT_HTTPHEADER => array(
			"key:  ef99b4c2f38fce3e4b16b168a8b2675e"
		),
	));

	$response = curl_exec($curl);
	$err = curl_error($curl);

	curl_close($curl);

	if ($err) {
		echo "cURL Error #:" . $err;
	} else {
		//echo $response;
	}
	
	$response = json_decode($response);
	drupal_set_message("<pre>".print_r($response->rajaongkir->results, true)."</pre>");
	foreach($response->rajaongkir->results as $data) {
		$id = $data->city_id;
		$name = $data->city_name;
		$province_id = $data->province_id;
		$type = $data->type;
		
		//if ($type == 'Kota')
			//db_query("INSERT INTO conext_kota (id, id_propinsi, nama_kota) VALUES (".$id.",".$province_id.", '".$name."')");
		//else
			//db_query("INSERT INTO conext_kabupaten (id, id_propinsi, nama_kabupaten) VALUES (".$id.",".$province_id.", '".$name."')");
	}
	
	return '';
}

function register_verify($uid, $token) {
	global $base_url;
	if (!empty($uid) && !empty($token)) {
		$user = user_load($uid);
		$verify_token = md5('conext'.$user->mail);
		if ($verify_token == $token) {
			// verify user
			$edit = array(
				'field_user_verified' => array(
					LANGUAGE_NONE => array(
						array('value' => TRUE)
					)
				),
			);
			user_save($user, $edit);
			drupal_set_message('You have been verified your account successfully', 'notice');
			if (isset($user->roles[5])) drupal_goto($base_url.'/employer');
			if (isset($user->roles[6])) drupal_goto($base_url.'/job_seeker');
		} else {
			drupal_set_message('Invalid token', 'error');
			
		}
	}
}

function get_term_list ($vocabulary_name) {
	$list = array();
	$vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
	$terms = taxonomy_get_tree($vocabulary->vid); 
	foreach($terms as $term) {
		$list[] = array(
			'tid'		=> $term->tid,
			'name'	=> $term->name,
			'vid'		=> $vocabulary->vid
		);
	}
	
	return $list;
}

function conext_login_user ($username, $password, $success_url, $fail_url, $roleid = 5) {
	$account = FALSE;
	if ($uid = user_authenticate($username, $password)) {
		$account = user_load($uid);
		//drupal_set_message("<pre>".print_r($account->roles, true)."</pre>");
		if ( isset($account->roles[$roleid]) ) {
			$form_state = array();
			$form_state['uid'] = $account->uid;      
			user_login_submit(array(), $form_state);
			//user_login_finalize($form_state);
			drupal_goto($success_url);
		} else {
			drupal_set_message('Invalid username or password', 'error');
			drupal_goto($fail_url);
		}
	} else {
		drupal_set_message('Invalid username or password', 'error');
		drupal_goto($fail_url);
	}
}

function conext_register_user ($params, $type = 'employer', $file_uri='') {
	if (isset($params)) {
		if (user_load_by_mail($params['email_address'])) { // email exist
			drupal_set_message('Email Exists', 'error');
		} else {
			$roles = ($type == 'job_seeker') ? array(DRUPAL_AUTHENTICATED_RID => 'authenticated user', 6 => 'Job Seeker') : array(DRUPAL_AUTHENTICATED_RID => 'authenticated user', 5 => 'Employer');
			// create user node
			$new_user = array(
				'name' => $params['email_address'],
				'pass' => $params['password'],
				'mail' => $params['email_address'],
				'status' => 1,
				'init' => 'Email',
				'roles' => $roles,
			);
			$account = user_save(NULL, $new_user);

			if ($type == 'job_seeker') {
				$education_city = (empty($params['education_other_city'])) ? $params['education_city'] : $params['education_other_city'];
				$last_work_city = (empty($params['current_city_other'])) ? $params['current_city'] : $params['current_city_other'];
				$current_work_start = (empty($params['work_month_start']) && empty($params['work_year_start'])) ? '' : $params['work_month_start'].'/'.$params['work_year_start'];
				$current_work_end = (empty($params['work_month_end']) && empty($params['work_year_end'])) ? '' : $params['work_month_end'].'/'.$params['work_year_end'];

				$query = "INSERT INTO conext_job_seeker (user_id, first_name, last_name, phone, address_street, address_country, address_province, address_zip, address_city, address_optional, current_title, current_company, current_work_start, current_work_end, current_city, current_industry, education, graduation, major, education_city, nationality, cv, public_profile_url, created_at, updated_at)
					VALUES (:user_id, :first_name, :last_name, :phone, :address_street, :address_country, :address_province, :address_zip, :address_city, :address_optional, :current_title, :current_company, :current_work_start, :current_work_end, :current_city, :current_industry, :education, :graduation, :major, :education_city, :nationality, :cv, :public_profile_url, NOW(), NOW())";
				db_query($query, array( 
					'user_id' => $account->uid, 
					'first_name' => $params['first_name'],
					'last_name' => $params['last_name'],
					'phone' => $params['phone'],
					'address_street' => $params['address'],
					'address_country' => $params['country'],
					'address_province' => $params['province'],
					'address_zip' => $params['zip_code'],
					'address_city' => $params['city'],
					'address_optional' => $params['address_optional'],
					'current_title' => $params['current_title'],
					'current_company' => $params['current_company'],
					'current_work_start' => $current_work_start, 
					'current_work_end' => $current_work_end,
					'current_city' => $params['current_city'],
					'current_industry' => $params['current_industry'],
					'education' => $params['education'],
					'graduation' => $params['graduation_year'],
					'major' => $params['major'],
					'education_city' => $education_city,
					'nationality' => $params['nationality'],
					'cv' => $file_uri,
					'public_profile_url' => $params['public_profile_url']
				));
				$_SESSION['linkedin'] = null;
			} else { // employer
				$query = "INSERT INTO conext_employer (user_id, salutation, first_name, last_name, phone, company, address, address_optional, city, industry, created_at, updated_at)
					VALUES (:user_id, :salutation, :first_name, :last_name, :phone, :company, :address, :address_optional, :city, :industry, NOW(), NOW())";
				db_query($query, array( 
					'user_id' => $account->uid, 
					'salutation' => $params['salutation'],
					'first_name' => $params['first_name'],
					'last_name' => $params['last_name'],
					'phone' => $params['phone'],
					'company' => $params['company'],
					'address' => $params['address'],
					'address_optional' => $params['address_optional'],
					'city' => $params['city'],
					'industry' => $params['industry']
				));
			}
			
			drupal_set_message('Save Successfully');
			return $account->uid;
		}
	}
}

function conext_update_user ($params, $type = 'employer', $file_uri = '') {
	global $user;
	if (isset($params)) {
		$existing_user = user_load($user->uid);
		$edit = array(
			'name' => $params['email_address'],
			'pass' => $params['password'],
			'mail' => $params['email_address'],
		);
		user_save($existing_user, $edit);
		
		if ($type == 'job_seeker') {
			$education_city = (empty($params['education_other_city'])) ? $params['education_city'] : $params['education_other_city'];
			$last_work_city = (empty($params['current_city_other'])) ? $params['current_city'] : $params['current_city_other'];
			$current_work_start = (empty($params['work_month_start']) && empty($params['work_year_start'])) ? '' : $params['work_month_start'].'/'.$params['work_year_start'];
			$current_work_end = (empty($params['work_month_end']) && empty($params['work_year_end'])) ? '' : $params['work_month_end'].'/'.$params['work_year_end'];
			$update_cv = (empty($file_uri)) ? "" : ", cv= ".$file_uri;
				
			$query = "UPDATE conext_job_seeker SET
				first_name=:first_name, last_name=:last_name, phone=:phone, address_street=:address_street, address_country=:address_country, 
				address_province=:address_province, address_zip=:address_zip, address_city=:address_city, address_optional=:address_optional,
				current_title=:current_title, current_company=:current_company, current_work_start=:current_work_start, current_work_end=:current_work_end,
				current_city=:current_city, current_industry=:current_industry, education=:education, graduation=:graduation, major=:major,
				education_city=:education_city, nationality=:nationality ".$update_cv."
				WHERE user_id=:user_id";
			db_query($query, array( 
				'first_name' => $params['first_name'],
				'last_name' => $params['last_name'],
				'phone' => $params['phone'],
				'address_street' => $params['address'],
				'address_country' => $params['country'],
				'address_province' => $params['province'],
				'address_zip' => $params['zip_code'],
				'address_city' => $params['city'],
				'address_optional' => $params['address_optional'],
				'current_title' => $params['current_title'],
				'current_company' => $params['current_company'],
				'current_work_start' => $current_work_start, 
				'current_work_end' => $current_work_end,
				'current_city' => $params['current_city'],
				'current_industry' => $params['current_industry'],
				'education' => $params['education'],
				'graduation' => $params['graduation_year'],
				'major' => $params['major'],
				'education_city' => $education_city,
				'nationality' => $params['nationality'],
				'user_id' => $user->uid
			));
		} else { // employer
			$query = "UPDATE conext_employer SET salutation=:salutation, first_name=:first_name, last_name=:last_name, phone=:phone, company=:company, address=:address, address_optional=:address_optional, city=:city, industry=:industry WHERE user_id=:user_id";
			db_query($query, array( 
				'user_id' => $user->uid, 
				'salutation' => $params['salutation'],
				'first_name' => $params['first_name'],
				'last_name' => $params['last_name'],
				'phone' => $params['phone'],
				'company' => $params['company'],
				'address' => $params['address'],
				'address_optional' => $params['address_optional'],
				'city' => $params['city'],
				'industry' => $params['industry']
			));
		}
		drupal_set_message('Saved Profile Successfully');
	}
}

function conext_post_job($params, $new_user = '') {
	global $user;
	$timestamp = time();
	$publish_job_public = '';
	$job_benefit = '';
	
	// create conext job applied node
	$node = new stdClass();
	$node->type = 'job';
	$node->status = 1;
	$node->uid = $user->uid;
	$node->title = $params['title'];
	$node->promote = 1;
	$node->language = LANGUAGE_NONE;
	$node->path['pathauto'] = TRUE;
	$node->created = $timestamp;
	$node->timestamp = $timestamp;
	node_save($node);

	foreach($params['benefits'] as $key=>$benefit) {
		if ($benefit == 'other' && !empty($params['other_benefit'])) $benefit = $params['other_benefit'];
		if ($key > 0) $job_benefit .= '||'.$benefit;
		else $job_benefit .= $benefit;
	}
	$publish_job_public = ($params['publish_job_public'] == 'publish_job') ? 1 : 0;
	
	$query = "INSERT INTO conext_job (drupal_job_id, title, location, qualification, salary_min, salary_max, industry, requirement, responsibility, short_description, benefit, job_status, published_at, employer_id, publish_job_public, created_at, updated_at)
		 VALUES (:drupal_job_id, :title, :location, :qualification, :salary_min, :salary_max, :industry, :requirement, :responsibility, :short_description, :benefit, :job_status, NOW(), :employer_id, :publish_job_public, NOW(), NOW())";
	db_query($query, array(  
		'drupal_job_id' => $node->nid,
		'title' => $params['title'],
		'location' => $params['location'],
		'qualification' => $params['qualification'],
		'salary_min' => $params['salary_min'],
		'salary_max' => $params['salary_max'],
		'industry' => $params['industry'],
		'requirement' => $params['requirement'],
		'responsibility' => $params['responsibility'],
		'short_description' => $params['short_description'],
		'benefit' => $job_benefit,
		'job_status' => WAITING_FOR_APPROVAL,
		'employer_id' => (empty($new_user)) ? $user->uid : $new_user,
		'publish_job_public' => $publish_job_public
	));
	
	drupal_set_message('Posted Job Successfully');
}

function conext_get_month() {
	return array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);
}

function conext_get_year() {
	$year = array();
	for ($x = 1980; $x <= 2017; $x++) {
    $year[] = $x;
	}
	
	return $year;
}

function valid_user_role($role_id) {
	global $user;
	if (isset($user->roles[$role_id])) return true;
	else return false;
}

function format_salary ($salary) {
	return 'Rp. '.$salary.'.000.000';
}

function get_salary_range() {
	return array(
		'salary_min' => array(1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50),
		'salary_max' => array(2, 3, 4, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 51)
	);
}

function get_other_setting (){
	return array(
		'conext_email_from' => variable_get('conext_email_from'),
		'about_conext' => variable_get('about_conext'),
		'office_address' => variable_get('office_address'),
		'twitter' => variable_get('twitter'),
		'facebook' => variable_get('facebook'),
		'linkedin' => variable_get('linkedin')
	);
}

function get_client() {
	$clients = db_query("SELECT nid FROM node WHERE type = 'client'");
	foreach($clients as $client) {
		$node_client[] = node_load($client->nid);
	}
	return $node_client;
}

function get_testimonial() {
	$testimonials = db_query("SELECT nid FROM node WHERE type = 'testimonial'");
	foreach($testimonials as $testimonial) {
		$node_testimonial[] = node_load($testimonial->nid);
	}
	return $node_testimonial;
}

function get_article_home() {
	$articles = db_query("SELECT nid FROM node WHERE type = 'article' LIMIT 3");
	foreach($articles as $article) {
		$node_article[] = node_load($article->nid);
	}
	return $node_article;
}

function get_home_header_title($arg0) {
	switch ($arg0) {
		case 'article':
			$header_title = 'Articles';
			break;
		case 'about':
			$header_title = 'About Us';
			break;
		case 'content':
			$header_title = 'Work With Conext';
			break;
		case 'job':
			$header_title = 'Jobs';
			break;
		default:
			$header_title = '';
			break;
	}
	
	return $header_title;
}

function is_city_exist($nama_kota) {
	$city = db_query("SELECT nama_kota FROM conext_kota WHERE nama_kota = :nama_kota", array('nama_kota' => $nama_kota))->fetchField();
	if (empty($city)) return false;
	else return true;
}