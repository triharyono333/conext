<?php

// $Id$

function article_menu() {
	$items['articles'] = array(
		'title' => t('Articles'),
		'description' => 'Articles',
		'page callback' => 'articles',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
        
	return $items;
}

/**
 * Implements hook_theme().
 */
function article_theme($existing, $type, $theme, $path) {
	return array(
		'article' => array(
			'variables' => array('content' => NULL),
			'template' => 'article',
			'path' => drupal_get_path('module', 'article')
		)
	);
}

function articles() {
	global $base_url;
	$category_nid = arg(1);
	
	// get all categories
	$categories = db_query("SELECT nid, title FROM node WHERE type = 'article_category'");
	foreach($categories as $category) {
		$article_category[] = array('nid' => $category->nid, 'title' => $category->title);
	}
				
	// get article list detail 
	$filter_category = (empty($category_nid)) ? '' : ' INNER JOIN field_data_field_article_category ac ON n.nid=ac.entity_id AND field_article_category_target_id = '.$category_nid;
	
// for paging
	$total = db_query("SELECT COUNT(nid) FROM node n ".$filter_category." WHERE type = 'article'")->fetchField();
	$limit = JOB_PER_PAGE;
	$pages = ceil($total / $limit);
	$page = empty($_GET['page']) ? 1 : $_GET['page'];
	$offset = ($page - 1)  * $limit;

	// article list 
	$articles = db_query("SELECT nid, title FROM node n ".$filter_category." WHERE type = 'article' ORDER BY n.created DESC LIMIT ".$limit." OFFSET ".$offset);
	foreach($articles as $article) {
		$node_article = node_load($article->nid);
		$image_path = file_create_url($node_article->field_article_image[LANGUAGE_NONE][0]['uri']);
		$created_by = db_query("SELECT name FROM users WHERE uid = :uid", array('uid' => $node_article->uid))->fetchField();
		$article_detail[] = array(
			'nid' => $article->nid,
			'title' => $node_article->title,
			'created_by' => $created_by,
			'created_at' => date('d M Y', $node_article->created),
			'short_description' => $node_article->field_article_short_description[LANGUAGE_NONE][0]['value'],
			'article_link' => $base_url."/".drupal_get_path_alias("node/".$article->nid),
			'article_image' => $image_path
		);
	}
	
	$content = array(
		'nid' => $category_nid,
		'article_category' => $article_category,
		'article_detail' => $article_detail,
		'pages' => $pages
	);
	
	//drupal_set_message('<pre>'.print_r($content, true).'</pre>');
	return theme('article', array('content' => $content));
}

function article_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'article':
			// get all categories
			$categories = db_query("SELECT nid, title FROM node WHERE type = 'article_category'");
			foreach($categories as $category) {
				$article_category[] = array('nid' => $category->nid, 'title' => $category->title);
			}
			$created_by = db_query("SELECT name FROM users WHERE uid = :uid", array('uid' => $node->uid))->fetchField();
			
			$node->content['article_category'] = $article_category;
			$node->content['article_banner'] = file_create_url($node->field_article_image[LANGUAGE_NONE][0]['uri']);
			$node->content['created_by'] = $created_by;
			$node->content['created_at'] = date('d M Y', $node->created);
      //drupal_set_message('<pre>'.print_r($node->content, true).'</pre>');
			break;
  }
}

/**
 * Implements hook_mail()
 * @param 
 *   type $key to decide which email body to sent on basis of key parameter inacese of multiple email content
 * @param 
 *   type $message the email content to be sent.Message array contains 'subject and body ' for the email.
 * @param 
 *   type $params using to get the cusotm email content from a function.This can be used in my other ways aslo as per need.
 */
function article_mail($key, &$message, $params) {
	$language = $message['language'];
  switch ($key) {
    case 'article_creation_mail':
      $message['subject'] = "[Conext.id] ".$params['subject'];
      $message['body'][] = $params['body'];
			$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}

function article_node_insert($node) {
	global $base_url;
  switch ($node->type) {
    case 'article':  
			if (!empty($node->field_article_send_to_group)) {
				$role_array = [];
				$role_filter = '';
				
				// build email element
				$article_node = node_load($node->nid);
				$email_content = str_replace('img src="/sites/default/files', 'img src="'.$base_url.'/sites/default/files', $node->body[LANGUAGE_NONE][0]['value']);
				$email_content = "<img src='".file_create_url($article_node->field_article_image[LANGUAGE_NONE][0]['uri'])."' /> <br />".$email_content;
				
				$params = array(
					'body' => $email_content,
					'subject' => $node->title
				);
				$from = variable_get('conext_email_from');
				$key = 'article_creation_mail';

				// send emails
				foreach($node->field_article_send_to_group[LANGUAGE_NONE] as $role) {
					$role_array[] = $role['value'];
				}
				
				if (!empty($role_array)) {
					$roles = implode(',', $role_array);
					$role_filter = " AND rid IN (".$roles.")";
				}
				
				$users = db_query("SELECT u.uid, mail FROM users u INNER JOIN users_roles ur ON u.uid = ur.uid WHERE status = 1".$role_filter);
				foreach($users as $user) {
					$to = $user->mail;
					$mail = drupal_mail('article', $key, $to, language_default(), $params, $from);
					//drupal_set_message('<pre>'.print_r($mail, true).'</pre>', 'notice');
				}
			}
      break;
  }
}