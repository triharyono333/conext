<?php

// $Id$

function job_opening_menu() {
	$items['job_opening/%'] = array(
		'title' => t('Job Opening'),
		'description' => 'Job Opening',
		'page callback' => 'job_opening',
		'page arguments' => array(1),
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
	$items['job_opening_apply'] = array(
		'title' => t('Job Opening Apply'),
		'description' => 'Job Opening Apply',
		'page callback' => 'job_opening_apply',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
	$items['job_opening_captcha'] = array(
		'title' => t('Job Opening Captcha'),
		'description' => 'Job Opening Captcha',
		'page callback' => 'job_opening_captcha',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
	$items['job_opening/verify_captcha'] = array(
		'title' => t('verify_captcha'),
		'description' => 'verify_captcha',
		'page callback' => 'verify_captcha',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
        
	return $items;
}

/**
 * Implements hook_theme().
 */
function job_opening_theme($existing, $type, $theme, $path) {
	return array(
		'job_opening' => array(
			'variables' => array('content' => NULL),
			'template' => 'job_opening',
			'path' => drupal_get_path('module', 'job_opening')
		)
	);
}

function job_opening($nid) {
	global $base_url;
	
	$jobs = db_query("SELECT nid, title FROM node WHERE type = 'conext_job'");
	foreach($jobs as $job) {
		$job_openings[] = array('nid' => $job->nid, 'title' => $job->title);
	}
	$job_detail = node_load($nid);

	$content = array(
		'nid' => $nid,
		'job_detail' => $job_detail,
		'job_openings' => $job_openings
	);
	
	//drupal_set_message('<pre>'.print_r($content, true).'</pre>');
	return theme('job_opening', array('content' => $content));
}

function job_opening_apply(){
	global $user, $base_url;
	
	$redirect_url = $base_url.'/'.drupal_get_path_alias("node/".$_POST['nid']);
	if ($_POST['captcha'] != $_SESSION['captcha']) {
		drupal_set_message('Invalid Captcha', 'error');
		drupal_goto($redirect_url);
	}
	
	$timestamp = time();
	$path = $_FILES['cv_file']['tmp_name'];
	$file_temp = file_get_contents($path);
	$file_temp = file_save_data($file_temp, 'public://conext_cv/' . $timestamp .'-'. $_FILES['cv_file']['name'], FILE_EXISTS_RENAME);
	//drupal_set_message('<pre>'.print_r($file_temp, true).'</pre>', 'notice');
	
	if (isset($file_temp)) {
		// create conext job applied node
		$node = new stdClass();
		$node->type = 'conext_job_applied';
		$node->status = 1;
		$node->uid = $user->uid;
		$node->title = $_POST['contact_name'];
		$node->promote = 1;
		$node->language = LANGUAGE_NONE;
		$node->created = $timestamp;
		$node->timestamp = $timestamp;
		$node->body[LANGUAGE_NONE][0]['value'] = $_POST['cover_letter'];
		$node->field_job_applied_email[LANGUAGE_NONE][0]['value'] = $_POST['email_address'];
		$node->field_job_applied[LANGUAGE_NONE][0]['value'] = $_POST['job_applied'];
		$node->field_job_applied_cv[LANGUAGE_NONE][0]['value'] = $file_temp->uri;
		node_save($node);
		
		// send email notification
		$email_content = $_POST['contact_name'].' applied for '.$_POST['job_applied'].' job';
		$params = array('body' => $email_content, 'subject' => $_POST['contact_name'].' applied for '.$_POST['job_applied'].' job');
		$key = 'job_opening_notification_email';
		$to = variable_get('conext_applied_job_email_to');
		$from = variable_get('conext_email_from');
		$mail = drupal_mail('job_opening', $key, $to, language_default(), $params, $from);
	}
	
	drupal_set_message('You have successfully applied for this job', 'notice');
	drupal_goto($redirect_url);
}

function verify_captcha() {
	if (isset($_GET["captcha"])) {
		if ($_GET['captcha'] == $_SESSION['captcha']) {
			print "ok";
		} else {
			print "not ok";
		}
	} else {
		print "not ok";
	}
}

function job_opening_node_view($node, $view_mode, $langcode) {
	global $base_url;
  switch ($node->type) {
    case 'conext_job':
			$jobs = db_query("SELECT nid, title FROM node WHERE type = 'conext_job'");
			foreach($jobs as $job) {
				$job_openings[] = array('nid' => $job->nid, 'title' => $job->title);
			}
			$node->content['job_openings'] = $job_openings;
			$node->content['action'] = $base_url."/job_opening_apply";
     
      break;
  }
}

/**
 * Implements hook_mail()
 * @param 
 *   type $key to decide which email body to sent on basis of key parameter inacese of multiple email content
 * @param 
 *   type $message the email content to be sent.Message array contains 'subject and body ' for the email.
 * @param 
 *   type $params using to get the cusotm email content from a function.This can be used in my other ways aslo as per need.
 */
function job_opening_mail($key, &$message, $params) {
	$language = $message['language'];
  switch ($key) {
    case 'job_opening_notification_email':
      $message['subject'] = '[Job Applied] '.$params['subject'];
      $message['body'][] = $params['body'];
			$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}

function job_opening_captcha() {
	// Adapted for The Art of Web: www.the-art-of-web.com
  // Please acknowledge use of this code by including this header.

  // initialise image with dimensions of 120 x 30 pixels
  $image = @imagecreatetruecolor(150, 60) or die("Cannot Initialize new GD image stream");

  // set background to white and allocate drawing colours
  $background = imagecolorallocate($image, 0xFF, 0xFF, 0xFF);
  imagefill($image, 0, 0, $background);
  $linecolor = imagecolorallocate($image, 0xCC, 0xCC, 0xCC);
  $textcolor = imagecolorallocate($image, 0x33, 0x33, 0x33);

  // draw random lines on canvas
  for($i=0; $i < 6; $i++) {
    imagesetthickness($image, rand(1,3));
    imageline($image, 0, rand(0,60), 150, rand(0,60), $linecolor);
  }

  // add random digits to canvas
  $digit = '';
  for($x = 30; $x <= 95; $x += 20) {
    $digit .= ($num = rand(0, 9));
    imagechar($image, 5, $x, 20, $num, $textcolor);
  }

  // record digits in session variable
  $_SESSION['captcha'] = $digit;

  // display image and clean up
  header('Content-type: image/png');
  imagepng($image);
  imagedestroy($image);
}