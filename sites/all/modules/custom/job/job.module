<?php

function job_menu() {
	$items['jobs'] = array(
		'title' => t('Jobs'),
		'description' => 'jobs',
		'page callback' => 'jobs',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
	$items['job/submit'] = array(
		'title' => t('Job'),
		'description' => 'job',
		'page callback' => 'job_submit',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
	$items['job/apply'] = array(
		'title' => t('Job'),
		'description' => 'job',
		'page callback' => 'job_apply',
		'access arguments' => true,
		'access callback' => true,
		'type' =>  MENU_CALLBACK,
	);
	
        
	return $items;
}

/**
 * Implements hook_theme().
 */
function job_theme($existing, $type, $theme, $path) {
	return array(
		'job' => array(
			'variables' => array('content' => NULL),
			'template' => 'job',
			'path' => drupal_get_path('module', 'job')
		)
	);
}

function jobs () {
	global $user, $base_url;
	$filter_job_type = '';
	
	if (valid_user_role(EMPLOYER_ROLE_ID) || valid_user_role(JOB_SEEKER_ROLE_ID)) {
		if (!empty($_GET['main_search'])) { // we reset refine search filter
			$_GET['qualification'] = null;
			$_GET['job_type'] = null;
			$_GET['salary_min'] = null;
			$_GET['salary_max'] = null;
		}
		
		//$min_salary = (empty($_GET['salary_min'])) ? "1" : $_GET['salary_min'];
		//$max_salary = (empty($_GET['salary_max'])) ? "51" : $_GET['salary_max'];
		
		$filter_title = (empty($_GET['keyword'])) ? "" : " AND (b.title LIKE '%".$_GET['keyword']."%' OR b.location LIKE '%".$_GET['keyword']."%' OR b.job_type LIKE '%".$_GET['keyword']."%' OR b.requirement LIKE '%".$_GET['keyword']."%' OR b.responsibility LIKE '%".$_GET['keyword']."%' OR b.short_description LIKE '%".$_GET['keyword']."%' OR b.benefit LIKE '%".$_GET['keyword']."%')";
		$filter_industry = (empty($_GET['industry'])) ? "" : " AND industry = ".$_GET['industry'];
		$filter_city = (empty($_GET['location'])) ? "" : " AND location = '".$_GET['location']."'";
		$filter_qualification = (empty($_GET['qualification'])) ? "" : " AND qualification = ".$_GET['qualification'];
		//$filter_salary = " AND ( (salary_min BETWEEN ".$min_salary." AND ".$max_salary.") OR (salary_max BETWEEN ".$min_salary." AND ".$max_salary.") )";
		$filter_salary = (empty($_GET['salary_range'])) ? "" : " AND salary_range = '".$_GET['salary_range']."'";
		
		if (!empty($_GET['job_type'])) {
			$job_types = explode(",", $_GET['job_type']);
			$filter_job_type .= " AND (";
			foreach($job_types as $key=>$job_type) {
				if ($key > 0) $filter_job_type .= " OR job_type LIKE '%".$job_type."%'";
				else $filter_job_type .= "job_type LIKE '%".$job_type."%'";
			}
			$filter_job_type .= ") ";
		}
	
		$query_job_total = "SELECT COUNT(nid) FROM {node} a
			INNER JOIN {conext_job} b ON a.nid = b.drupal_job_id
			WHERE {job_status} = :job_status".
			$filter_title . $filter_industry . $filter_city . $filter_qualification . $filter_salary . $filter_job_type;
		$total = db_query($query_job_total, array('job_status' => PUBLISHED))->fetchField();
		$limit = JOB_PER_PAGE;
		$pages = ceil($total / $limit);
		$page = empty($_GET['page']) ? 1 : $_GET['page'];
		$offset = ($page - 1)  * $limit;
		
		$query_job = "SELECT * FROM node a
			INNER JOIN conext_job b ON a.nid = b.drupal_job_id 
			WHERE job_status = :job_status".
			$filter_title . $filter_industry . $filter_city . $filter_qualification . $filter_salary . $filter_job_type
			." ORDER BY a.created DESC LIMIT ".$limit." OFFSET ".$offset;
		$jobs = db_query($query_job, array('job_status' => PUBLISHED));
		
		$industries = get_term_list ('company_industry');
		$qualifications = get_term_list ('qualification');
		$cities = db_query("SELECT id, nama_kota FROM conext_kota");
		$months = conext_get_month();
		$years = conext_get_year();
		$salary = get_salary_range_v2();

		$content = array(
			'industries' => $industries,
			'cities' => $cities,
			'qualifications' => $qualifications,
			'user' => $user,
			'months' => $months,
			'years' => $years,
			//'salary_min' => $salary['salary_min'],
			//'salary_max' => $salary['salary_max'],
			'salary_range' => $salary,
			'jobs' => $jobs,
			'pages' => $pages,
			'total' => $total
		);
	
		return theme('job', array('content' => $content));
	} else {
		drupal_goto($base_url.'/job_seeker');
	}
}

function job_submit() {
	
}

function job_apply(){
	global $base_url;
	$nid = arg(2);
	$uid = arg(3);
	
	if (valid_user_role(JOB_SEEKER_ROLE_ID)) {
		if (!empty($nid) && !empty($uid)) {
			$query_insert = "INSERT INTO conext_job_applied (job_seeker_id, job_id, created_at) VALUES (:job_seeker_id, :job_id, NOW())";
			db_query($query_insert, array('job_seeker_id' => $uid, 'job_id' => $nid));
			drupal_set_message('You have applied successfully');
			drupal_goto($base_url.'/job_seeker/account');
		}
	}
}

function job_node_view($node, $view_mode, $langcode) {
	global $base_url, $user;
  switch ($node->type) {
    case 'job':
			$query_applied = "SELECT id FROM conext_job_applied WHERE job_seeker_id = :uid AND job_id = :nid";
			$applied = db_query($query_applied, array('uid' => $user->uid,'nid' => $node->nid))->fetchField();
			
			$query_job = "SELECT * FROM node a 
				INNER JOIN conext_job b ON a.nid = b.drupal_job_id 
				WHERE nid = :nid";
			$job = db_query($query_job, array('nid' => $node->nid));
		
			$node->content['job'] = $job;
			$node->content['applied'] = $applied;
     
      break;
  }
}